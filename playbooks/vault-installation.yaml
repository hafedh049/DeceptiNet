---
- name: Install, Configure, Reset, Initialize, and Unseal HashiCorp Vault
  hosts: HashiCorp
  gather_facts: true

  vars:
    vault_version: "1.18.2"
    vault_arch: "linux_amd64"
    vault_zip: "vault_{{ vault_version }}_{{ vault_arch }}.zip"
    vault_url: "https://releases.hashicorp.com/vault/{{ vault_version }}/{{ vault_zip }}"
    vault_bin_path: "/usr/local/bin/vault"
    vault_config_dir: "/etc/vault.d"
    vault_data_dir: "/opt/vault/data"
    vault_api_addr: "http://127.0.0.1:8200"
    key_shares: 5
    key_threshold: 3
    init_output_file: "/root/vault-init.json"

  tasks:
    - name: Download Vault binary archive
      ansible.builtin.get_url:
        url: "{{ vault_url }}"
        dest: "/tmp/{{ vault_zip }}"
        mode: "0644"

    - name: Unzip Vault binary
      ansible.builtin.unarchive:
        src: "/tmp/{{ vault_zip }}"
        dest: "/tmp"
        remote_src: true

    - name: Move Vault binary to /usr/local/bin
      ansible.builtin.command:
        cmd: mv /tmp/vault {{ vault_bin_path }}

    - name: Ensure Vault binary is executable
      ansible.builtin.file:
        path: "{{ vault_bin_path }}"
        mode: "0755"

    - name: Create Vault config directory
      ansible.builtin.file:
        path: "{{ vault_config_dir }}"
        state: directory
        mode: "0755"

    - name: Create Vault data directory
      ansible.builtin.file:
        path: "{{ vault_data_dir }}"
        state: directory
        mode: "0750"

    - name: Deploy Vault config file
      ansible.builtin.copy:
        dest: "{{ vault_config_dir }}/vault.hcl"
        mode: "0644"
        content: |
          listener "tcp" {
            address     = "0.0.0.0:8200"
            tls_disable = 1
          }

          storage "file" {
            path = "{{ vault_data_dir }}"
          }

          ui = true
          api_addr = "{{ vault_api_addr }}"

    - name: Set VAULT_ADDR environment variable globally
      ansible.builtin.copy:
        dest: "/etc/profile.d/vault.sh"
        mode: "0644"
        content: |
          export VAULT_ADDR="{{ vault_api_addr }}"

    - name: Deploy systemd unit file for Vault
      ansible.builtin.copy:
        dest: "/etc/systemd/system/vault.service"
        mode: "0644"
        content: |
          [Unit]
          Description=HashiCorp Vault
          Documentation=https://www.vaultproject.io/docs/
          After=network.target

          [Service]
          ExecStart={{ vault_bin_path }} server -config={{ vault_config_dir }}/vault.hcl
          ExecReload=/bin/kill --signal HUP $MAINPID
          KillMode=process
          Restart=on-failure
          LimitNOFILE=65536
          Environment=VAULT_ADDR={{ vault_api_addr }}

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      ansible.builtin.command: systemctl daemon-reload

    - name: Enable and start Vault service
      ansible.builtin.command: systemctl enable --now vault

    - name: Wait for Vault to be ready
      ansible.builtin.wait_for:
        port: 8200
        host: 127.0.0.1
        delay: 5
        timeout: 30

    - name: Check Vault status
      ansible.builtin.command:
        cmd: "{{ vault_bin_path }} status -format=json"
      environment:
        VAULT_ADDR: "{{ vault_api_addr }}"
      register: vault_status
      failed_when: false

    - name: Set vault_initialized and vault_sealed safely
      ansible.builtin.set_fact:
        vault_initialized: >-
          {{ (vault_status.stdout is string and vault_status.stdout | trim | length > 0)
             | ternary((vault_status.stdout | from_json).initialized, true) }}
        vault_sealed: >-
          {{ (vault_status.stdout is string and vault_status.stdout | trim | length > 0)
             | ternary((vault_status.stdout | from_json).sealed, true) }}

    - name: Initialize Vault only if not initialized
      ansible.builtin.command:
        cmd: "{{ vault_bin_path }} operator init -key-shares={{ key_shares }} -key-threshold={{ key_threshold }} -format=json"
      environment:
        VAULT_ADDR: "{{ vault_api_addr }}"
      register: vault_init
      when: not vault_initialized

    - name: Save init JSON output if Vault was just initialized
      ansible.builtin.copy:
        dest: "{{ init_output_file }}"
        mode: "0600"
        content: "{{ vault_init.stdout | from_json | to_nice_json }}"
      when: (vault_init is defined) and (vault_init.stdout is defined)

    - name: Load init JSON from file if Vault is already initialized
      ansible.builtin.slurp:
        src: "{{ init_output_file }}"
      register: saved_init

    - name: Set init_json fact
      ansible.builtin.set_fact:
        init_json: >-
          {{
            (vault_init is defined and vault_init.stdout is defined) 
              | ternary(vault_init.stdout, 
                        (saved_init is defined and saved_init.content is defined) 
                          | ternary(saved_init.content | b64decode, '{}'))
          }}

    - name: Extract unseal keys and root token
      ansible.builtin.set_fact:
        unseal_keys: "{{ init_json.unseal_keys_b64 | default([]) }}"
        root_token: "{{ init_json.root_token | default('') }}"

    - name: Unseal Vault if sealed
      ansible.builtin.command:
        cmd: "{{ vault_bin_path }} operator unseal {{ item }}"
      environment:
        VAULT_ADDR: "{{ vault_api_addr }}"
      loop: "{{ unseal_keys[0:key_threshold] }}"
      when: vault_sealed and (unseal_keys | length) >= key_threshold
      register: unseal_results

    - name: Verify Vault status after unseal
      ansible.builtin.command:
        cmd: "{{ vault_bin_path }} status -format=json"
      environment:
        VAULT_ADDR: "{{ vault_api_addr }}"
      register: vault_status_after

    - name: Show Vault status (non-sensitive)
      ansible.builtin.debug:
        msg: "{{ vault_status_after.stdout | from_json }}"
